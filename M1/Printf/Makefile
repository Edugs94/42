# --- Variables de configuraci√≥n ---

# Nombre de la librer√≠a que vamos a crear
NAME = libftprintf.a

# Compilador y sus flags. -I. e -Ilibft le dicen al compilador que busque
# los archivos de cabecera (.h) en el directorio actual y en el directorio libft.
CC = cc
CFLAGS = -Wall -Werror -Wextra
INCLUDES = -I. -Ilibft


# Comandos comunes
AR = ar rcs
RM = rm -f
MAKE = make

# --- Archivos del proyecto ---

# Lista de todos los archivos fuente (.c) de tu proyecto
SRCS = ft_printf.c \
       utils_01.c \
       utils_02.c

# Genera autom√°ticamente la lista de archivos objeto (.o) a partir de los .c
OBJS = $(SRCS:.c=.o)

HEADERS = ft_printf.h

# --- Variables de la sub-librer√≠a (libft) ---

# Directorio donde se encuentra la librer√≠a libft
LIBFT_DIR = libft
# Ruta completa al archivo de la librer√≠a libft.a
LIBFT_A = $(LIBFT_DIR)/libft.a

# --- Reglas de construcci√≥n ---

# Regla por defecto que se ejecuta con 'make'
all: $(NAME)

# Regla para crear la librer√≠a principal: libftprintf.a
# Depende de nuestros archivos objeto (.o) y de que la librer√≠a libft.a ya exista.
$(NAME): $(OBJS) $(LIBFT_A)
	# Archivamos S√ìLO los archivos objeto de este proyecto en libftprintf.a
	@$(AR) $(NAME) $(OBJS)
	@echo "‚úÖ libftprintf.a creada correctamente."

# Regla para construir la librer√≠a libft.a.
# Make detecta que $(NAME) depende de $(LIBFT_A), as√≠ que ejecutar√°
# esta regla primero. Entra en el directorio 'libft' y ejecuta su propio make.
$(LIBFT_A):
	@echo "Construyendo la librer√≠a dependiente: libft..."
	@$(MAKE) -C $(LIBFT_DIR)

# Regla gen√©rica para compilar cualquier archivo .c en un .o
# $< es el primer prerrequisito (el .c) y $@ es el objetivo (el .o).
%.o: %.c $(HEADERS)
	@echo "Compilando $<..."
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# --- Reglas de limpieza ---

# 'make clean': Borra solo los archivos objeto de este proyecto y de libft
clean:
	@$(RM) $(OBJS)
	@$(MAKE) -C $(LIBFT_DIR) clean
	@echo "üßπ Archivos objeto (.o) eliminados."

# 'make fclean': Ejecuta 'clean' y adem√°s borra las librer√≠as .a generadas
fclean: clean
	@$(RM) $(NAME)
	@$(MAKE) -C $(LIBFT_DIR) fclean
	@echo "üóëÔ∏è Todo limpio."

# 'make re': Reconstruye todo el proyecto desde cero
re: fclean all

# --- Reglas Phony ---
# Declara reglas que no representan archivos para evitar conflictos.
.PHONY: all clean fclean re
